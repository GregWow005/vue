Similar to the Vue Instance

const app = new Vue({
    data : {},
    // Update data
    methods : {}
    // Can access our data
    computed : {}
})


const = new Vue.Store({
    state : {},
    // Update de Vuex state
    actions : {},
    // Can access our state
    getters : {},
    // Mutations are used to commit and track state changes.
    // actions call mutations which Update our state directly
    mutations : {}
})

---------------------------------------

How to use
- main.js
    - Importar el archivo 'store.js' como namespace
    - Añadirlo como propiedad de la instancia Vue
        -> new Vue({
            el: '#app',
            store     : store,
            render: h => h(App)
            })
- Crear archivo en /store/store.js
    - store.js  
        - importar vue, vuex y usarlo
        ->  import Vue from 'vue';
            import Vuex from 'vuex';
            Vue.use(Vuex);
    - Exportar la constante store para que pueda ser usada por toda la instancia De Vue
        -> export const store = new Vuex.Store({
                state : {
                    cantidad : 0
                }
            });

    - state : {
        // "BBDD" - Contiene claves que almacenan daticos
        user : [{name:"Pter",email:"pter@pter.es"},{name:"Terp",email:"terp@terp.es"}],
    }
    - getters : {
        // Contiene métodos que actuan sobre los elemento de la "BBDD" pero no los modifican. Atención al parametro 'state'
        method : (state) => {
            // your body function here
        }
    }
    - mutations : {
        // Métodos sincronos que modifican las "BBDD". 
        // Atención a los parametros que reciben los métodos (state,paylod)
        methos : (state,payload) => {
            // your body function here
        }
    },
    - actions : {
        // Métodos asíncronos que emiten eventos sobre las mutaciones. NO modifican datos de la "BBDD"
        // Atención al parametro 'context'
        // La cominicación con las Mutations es a traves de: context.commit("SetDataUsers", fake_data);
        
        getUsers: async context => {
            var url = "https://randomuser.me/api/?results=5";
            try {
                let response = await fetch(url);
                let data = await response.json();
                localStorage.setItem("fakedata", JSON.stringify(data));
                context.commit("SetDataUsers", data);
            } catch (err) {
                // catches errors both in fetch and response.json
                var fake_data = JSON.parse(localStorage.getItem("fakedata"));
                context.commit("SetDataUsers", fake_data);
                console.log("Upsss! ", err, " Using fake data");
            }
        }
    }

MAPSTATE
-Tiene acceso al estado del store (VIP - Importar el objeto 'store' en la instacia principal)
-Como usarlo?
    - En el componente a usar
        - Importar el mapState de Vuex.
            -> import {mapState} from 'vuex'
        - las computed properties se igualan al objeto mapState.
            -> computed : mapState(['propiedad_store'])
        - Usar la propiedad_store en alguna parte del componente.

MAPGETTERS
- Se usa para realizar 'cálculos' sobre el almacén de datos en el 'store'.
- Son como computed properties para los 'stores'.
- Los getters devuelve resultados basados en propiedades del estado
- Cómo usarlo?
    - En el componente a usar
        - Importar el mapGetters de vuex
            -> import {mapGetters} from 'vuex'
        - Las computed properties se igualan al objeto mapState.
            -> computed : mapGetters(['propiedad_store'])
        - Usar la propiedad_store en alguna parte del componente

MUTATIONS
- 'Setters' que modifican los datos del store
- Se implementan con el método 'commit' para que dejen un log de como estás modificando los datos
- Las mutaciones deben ser síncronas. Centraliza en cada momento cómo está el estado.
- ¿Cómo usarlo?
    - En el componente a usar
        - Importar el mapMutations de vuex
            -> import {mapMutations} from 'vuex'
        - Los 'methods' se igualan al objeto mapMutations
            -> methods: mapMutations(['propiedad_store'])
        - Usar la propiedad_store - Método de las mutations
ACTIONS
- En lugar de mutar el estado, las acctiones commitean las mutations
- Las acciones son asíncronas

NOTA
Para usar multiples 'Maps':
->      ...mapGetters(['doneTodos']),
        ...mapState(["task_name"])